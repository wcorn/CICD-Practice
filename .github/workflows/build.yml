name: CI/CD Docker

# 트리거를 수행할 브랜치를 지정합니다. push 혹은 merge 될 때 실행되도록 설정할 수 있습니다.
on:
  push:
    branches: [ develop ]

# Docker image의 이름과 version, name을 환경변수로 지정합니다.
env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/trading
  VERSION: ${{ github.sha }}
  NAME: go_cicd

# workflow는 다양한 jobs로 구성되는데 이러한 jobs 중 build와 deploy를 생성해줍니다.
# 이 때 steps 하위의 name은 각 단계에서 무엇을 실행할지를 작성해줍니다.
# runs-on은 어떤 OS에서 실행될지를 지정해줍니다.
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # 1단계: 현재 상태의 소스코드를 cotainer 안으로 checkout 해주는 역할을 합니다.
      - name: Check out source code
        uses: actions/checkout@v2
      # 2단계: continer 안에 docker가 실행될 수 있는 환경을 설치하는 역할을 합니다.
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }} # runner 설정에서 읽어들일거에요.
          restore-keys: |
            ${{ runner.os }}-buildx-
      # 3단계: github token을 이용해 GHCR에 로그인하는 역할을 합니다.
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      # 4단계: GHCR로 Docker image를 만들고 push 합니다.
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest

  # GHCR에 로그인 후 저장된 Docker Image를 이용해 컨테이너를 실행시킵니다.
  # Docker run 단계는 실행 중인 도커 컨테이너를 중지하고 이전 버전의 컨테이너와 이미지를 삭제 후 새로운 이미지로 컨테이너를 run 합니다.
  deploy:
    needs: build
    name: Deploy
    # self-hosted는 필수 값입니다.
    # 뒷 부분에 작성되는 이름은 Runner(EC2) 지정 시 사용할 이름입니다.
    runs-on: [ self-hosted, label-go ]
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Docker run
        run: |
          docker stop ${{ env.NAME }} && docker rm ${{ env.NAME }} && docker rmi ${{ env.DOCKER_IMAGE }}:latest
          docker run -d --name go_cicd --restart always ${{ env.DOCKER_IMAGE }}:latest